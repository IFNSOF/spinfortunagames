import json
import os
import asyncio
import random
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiohttp import web

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TOKEN = "8499397849:AAGgiXQhk6Wq0vIYFxMKicZwoIBFoqZNWJk"             # <-- —Å—é–¥–∞ —Ç–æ–∫–µ–Ω
ADMIN_ID = 7816374758            # <-- —Å—é–¥–∞ —Å–≤–æ–π ID
CHANNEL_FOR_LOGS = "@wnref"  # <-- –∫–∞–Ω–∞–ª –¥–ª—è –∞–≤—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–π
START_DATE = "27.10.2025"
OWNER = "@winikson"
SUPPORT = "@winiksona"

DATA_FILE = "data.json"
CHANNELS_FILE = "channels.json"

bot = Bot(token=TOKEN, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot)

# === JSON –±–∞–∑–∞ ===
def load_json(file, default):
    if not os.path.exists(file):
        with open(file, "w") as f: json.dump(default, f)
    with open(file) as f: return json.load(f)
def save_json(file, d): open(file, "w").write(json.dumps(d, indent=2))
def load_data(): return load_json(DATA_FILE, {})
def save_data(d): save_json(DATA_FILE, d)
def load_channels(): return load_json(CHANNELS_FILE, ["@example_channel"])
def save_channels(c): save_json(CHANNELS_FILE, c)

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ ===
async def check_subscription(uid):
    for ch in load_channels():
        try:
            m = await bot.get_chat_member(ch, uid)
            if m.status not in ("member", "administrator", "creator"):
                return False
        except: return False
    return True

# === –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ===
def main_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üé≤ –ò–≥—Ä–∞—Ç—å", "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
    kb.add("üí∞ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    kb.add("üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
    return kb

# === –°—Ç–∞—Ä—Ç ===
@dp.message_handler(commands=["start"])
async def start(msg: types.Message):
    data = load_data()
    uid = str(msg.from_user.id)
    ref = msg.text.split(" ")[1] if len(msg.text.split()) > 1 else None
    if uid not in data:
        data[uid] = {"name": msg.from_user.full_name, "balance": 0, "ref": ref, "last_bonus": "0"}
        save_data(data)
    if not await check_subscription(msg.from_user.id):
        return await msg.answer(f"‚ö†Ô∏è –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª(—ã):\n" + "\n".join(load_channels()))
    # –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞
    if ref and ref in data and ref != uid:
        data[ref]["balance"] += 1000; save_data(data)
        await bot.send_message(ref, f"üë• –ù–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª: {msg.from_user.full_name} +1000 Gram")
    await msg.answer("üé∞ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=main_menu())

# === –ò–≥—Ä–∞ ===
@dp.message_handler(lambda m: m.text == "üé≤ –ò–≥—Ä–∞—Ç—å")
async def play(msg: types.Message):
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–≤–∫—É:")

    @dp.message_handler(lambda m: m.text.isdigit())
    async def bet(m: types.Message):
        d = load_data(); uid = str(m.from_user.id); bet = int(m.text)
        if d[uid]["balance"] < bet: return await m.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!")
        await m.answer("üé≤ –ö–∏–¥–∞–µ–º –∫—É–±–∏–∫–∏...")
        user = await m.answer_dice("üé≤"); await asyncio.sleep(4)
        botd = await m.answer_dice("üé≤"); await asyncio.sleep(4)
        u, b = user.dice.value, botd.dice.value
        if u > b: d[uid]["balance"] += bet; res=f"–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏! +{bet}"
        elif u < b: d[uid]["balance"] -= bet; res=f"–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏! -{bet}"
        else: res="–ù–∏—á—å—è!"
        save_data(d); await m.answer(res, reply_markup=main_menu())

# === –ü—Ä–æ—Ñ–∏–ª—å ===
@dp.message_handler(lambda m: m.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def profile(msg: types.Message):
    d=load_data();u=d[str(msg.from_user.id)]
    kb=types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üíµ –ü–æ–ø–æ–ª–Ω–∏—Ç—å","üí∏ –í—ã–≤–µ—Å—Ç–∏");kb.add("üéÅ –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å","üîô –ù–∞–∑–∞–¥")
    await msg.answer(f"<b>üë§ –ü—Ä–æ—Ñ–∏–ª—å</b>\n–ù–∏–∫: {u['name']}\nID: {msg.from_user.id}\n–ë–∞–ª–∞–Ω—Å: {u['balance']} Gram",reply_markup=kb)

@dp.message_handler(lambda m:m.text=="üîô –ù–∞–∑–∞–¥")
async def back(m): await m.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",reply_markup=main_menu())

# === –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å ===
@dp.message_handler(lambda m:m.text=="üí∞ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å")
async def bonus(m):
    d=load_data();uid=str(m.from_user.id);now=datetime.now().strftime("%Y-%m-%d")
    if d[uid]["last_bonus"]!=now:
        d[uid]["balance"]+=500;d[uid]["last_bonus"]=now;save_data(d)
        await m.answer("üéÅ +500 Gram!")
    else: await m.answer("‚è≥ –†–∞–∑ –≤ –¥–µ–Ω—å!")

# === –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ===
@dp.message_handler(lambda m:m.text=="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def stats(m):
    d=load_data()
    await m.answer(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n–î–∞—Ç–∞ —Å—Ç–∞—Ä—Ç–∞: {START_DATE}\n–í–ª–∞–¥–µ–ª–µ—Ü: {OWNER}\n–ü–æ–¥–¥–µ—Ä–∂–∫–∞: {SUPPORT}\n–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(d)}")

# === –ü–æ–¥–¥–µ—Ä–∂–∫–∞ ===
@dp.message_handler(lambda m:m.text=="üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def support(m):
    await m.answer("‚úçÔ∏è –û–ø–∏—à–∏ –ø—Ä–æ–±–ª–µ–º—É:")
    @dp.message_handler()
    async def sup(msg:types.Message):
        kb=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("‚úâÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å",callback_data=f"reply_{msg.from_user.id}"))
        await bot.send_message(ADMIN_ID,f"üì© –û—Ç {msg.from_user.full_name} ({msg.from_user.id}):\n{msg.text}",reply_markup=kb)
        await msg.answer("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!",reply_markup=main_menu())

# === CALLBACK –∞–¥–º–∏–Ω ===
@dp.callback_query_handler(lambda c:True)
async def cb(c:types.CallbackQuery):
    d=load_data();data=c.data
    if data.startswith("reply_"):
        uid=int(data.split("_")[1])
        await bot.send_message(ADMIN_ID,f"–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è {uid}:")
        @dp.message_handler()
        async def ans(m:types.Message):
            await bot.send_message(uid,f"üí¨ –û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∞:\n{m.text}")
            await m.answer("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
    elif data.startswith("add_"):
        uid,s=data.split("_")[1],int(data.split("_")[2]);d[uid]["balance"]+=s;save_data(d)
        await bot.send_message(int(uid),f"‚úÖ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ +{s} Gram")
        await c.message.edit_text("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ.")
    elif data.startswith("deny_"):
        await bot.send_message(int(data.split("_")[1]),"‚ùå –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.");await c.message.edit_text("‚ùå –û—Ç–∫–∞–∑–∞–Ω–æ.")
    elif data.startswith("wdok_"):
        uid,s=data.split("_")[1],int(data.split("_")[2])
        await bot.send_message(int(uid),f"‚úÖ –í—ã–≤–æ–¥ {s} Gram –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!")
        try: await bot.send_message(CHANNEL_FOR_LOGS,"üí∏ –ò–≥—Ä–æ–∫ —Å–¥–µ–ª–∞–ª –≤—ã–≤–æ–¥ —Å –±–æ—Ç–∞ üí∏")
        except: pass
        await c.message.edit_text("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ.")
    elif data.startswith("wderr_"):
        uid,s=data.split("_")[1],int(data.split("_")[2])
        d[uid]["balance"]+=s;save_data(d)
        await bot.send_message(int(uid),"‚ùå –í—ã–≤–æ–¥ –æ—Ç–∫–ª–æ–Ω–µ–Ω, —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã.")
        await c.message.edit_text("‚ùå –û—Ç–∫–∞–∑–∞–Ω–æ.")

# === –ê–≤—Ç–æ–ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª ===
async def auto_post():
    while True:
        try: await bot.send_message(CHANNEL_FOR_LOGS,"üí∏ –ò–≥—Ä–æ–∫ —Å–¥–µ–ª–∞–ª –≤—ã–≤–æ–¥ —Å –±–æ—Ç–∞ üí∏")
        except: pass
        await asyncio.sleep(random.randint(300,600))

# === Flask/AIOHTTP –¥–ª—è Koyeb ===
app=web.Application()
async def handle(req): return web.Response(text="Bot running on port 8000")
app.add_routes([web.get("/",handle)])

# === –ó–∞–ø—É—Å–∫ ===
async def start_all():
    loop=asyncio.get_event_loop()
    loop.create_task(auto_post())
    runner=web.AppRunner(app);await runner.setup()
    site=web.TCPSite(runner,"0.0.0.0",8000);await site.start()
    print("‚úÖ Bot started on 8000")
    await executor.start_polling(dp,skip_updates=True)

if __name__=="__main__":
    asyncio.get_event_loop().run_until_complete(start_all())
