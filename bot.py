import json
import os
import asyncio
import random
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiohttp import web

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
TOKEN = "8499397849:AAGgiXQhk6Wq0vIYFxMKicZwoIBFoqZNWJk"
ADMIN_ID = 7816374758
DATA_FILE = "data.json"
CHANNELS_FILE = "channels.json"
START_DATE = "18.10.2025"
OWNER = "@winikson"
SUPPORT = "@winiksona"
CHANNEL_FOR_LOGS = "@wnref"  # –∫–∞–Ω–∞–ª, –∫—É–¥–∞ –±–æ—Ç —à–ª–µ—Ç ‚Äú–ò–≥—Ä–æ–∫ —Å–¥–µ–ª–∞–ª –≤—ã–≤–æ–¥ —Å –±–æ—Ç–∞‚Äù

bot = Bot(token=TOKEN, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot)

# === JSON –±–∞–∑–∞ ===
def load_json(file, default):
    if not os.path.exists(file):
        with open(file, "w") as f:
            json.dump(default, f)
    with open(file, "r") as f:
        return json.load(f)

def save_json(file, data):
    with open(file, "w") as f:
        json.dump(data, f, indent=2)

def load_data(): return load_json(DATA_FILE, {})
def save_data(d): save_json(DATA_FILE, d)
def load_channels(): return load_json(CHANNELS_FILE, ["@example_channel"])
def save_channels(c): save_json(CHANNELS_FILE, c)

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ ===
async def check_subscription(user_id):
    for ch in load_channels():
        try:
            member = await bot.get_chat_member(ch, user_id)
            if member.status not in ("member", "administrator", "creator"):
                return False
        except:
            return False
    return True

# === –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ===
def main_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üé≤ –ò–≥—Ä–∞—Ç—å", "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
    kb.add("üí∞ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    kb.add("üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
    return kb

# === –°—Ç–∞—Ä—Ç ===
@dp.message_handler(commands=["start"])
async def start(msg: types.Message):
    data = load_data()
    uid = str(msg.from_user.id)
    ref = msg.text.split(" ")[1] if len(msg.text.split()) > 1 else None
    if uid not in data:
        data[uid] = {"name": msg.from_user.full_name, "balance": 0, "ref": ref, "last_bonus": "0"}
    save_data(data)

    if not await check_subscription(msg.from_user.id):
        chs = "\n".join(load_channels())
        return await msg.answer(f"‚ö†Ô∏è –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª(—ã):\n{chs}")

    # –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
    if ref and ref in data and ref != uid:
        data[ref]["balance"] += 1000
        save_data(data)
        await bot.send_message(ref, f"üë§ –ù–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª: {msg.from_user.full_name} +1000 Gram!")

    await msg.answer("üé∞ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=main_menu())

# === –ò–≥—Ä–∞ ===
@dp.message_handler(lambda m: m.text == "üé≤ –ò–≥—Ä–∞—Ç—å")
async def play(msg: types.Message):
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–≤–∫—É:")

    @dp.message_handler(lambda m: m.text.isdigit())
    async def bet(m: types.Message):
        data = load_data()
        uid = str(m.from_user.id)
        bet = int(m.text)
        if data[uid]["balance"] < bet:
            return await m.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!")

        await m.answer("üé≤ –ö–∏–¥–∞–µ–º –∫—É–±–∏–∫–∏...")
        user_dice = await m.answer_dice("üé≤")
        await asyncio.sleep(4)
        bot_dice = await m.answer_dice("üé≤")
        await asyncio.sleep(4)

        u, b = user_dice.dice.value, bot_dice.dice.value
        if u > b:
            data[uid]["balance"] += bet
            res = f"–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏! +{bet}üí∞"
        elif u < b:
            data[uid]["balance"] -= bet
            res = f"–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏! -{bet}üí∞"
        else:
            res = "–ù–∏—á—å—è!"
        save_data(data)
        await m.answer(res, reply_markup=main_menu())

# === –ü—Ä–æ—Ñ–∏–ª—å ===
@dp.message_handler(lambda m: m.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def prof(msg: types.Message):
    d = load_data()
    u = d[str(msg.from_user.id)]
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üíµ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", "üí∏ –í—ã–≤–µ—Å—Ç–∏")
    kb.add("üéÅ –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å", "üîô –ù–∞–∑–∞–¥")
    await msg.answer(f"<b>üë§ –ü—Ä–æ—Ñ–∏–ª—å</b>\n–ù–∏–∫: {u['name']}\nID: {msg.from_user.id}\n–ë–∞–ª–∞–Ω—Å: {u['balance']} Gram",
                     reply_markup=kb)

@dp.message_handler(lambda m: m.text == "üîô –ù–∞–∑–∞–¥")
async def back(msg: types.Message): await msg.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu())

# === –ü–æ–ø–æ–ª–Ω–∏—Ç—å ===
@dp.message_handler(lambda m: m.text == "üíµ –ü–æ–ø–æ–ª–Ω–∏—Ç—å")
async def depo(msg: types.Message):
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:")

    @dp.message_handler(lambda m: m.text.isdigit())
    async def get_sum(m: types.Message):
        sum_ = int(m.text)
        await m.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —á–µ–∫:")
        @dp.message_handler()
        async def get_check(x: types.Message):
            kb = types.InlineKeyboardMarkup()
            kb.add(types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"add_{x.from_user.id}_{sum_}"))
            kb.add(types.InlineKeyboardButton("‚ùå –û—Ç–∫–∞–∑–∞—Ç—å", callback_data=f"deny_{x.from_user.id}_{sum_}"))
            await bot.send_message(ADMIN_ID, f"üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ {sum_} Gram –æ—Ç {x.from_user.full_name} ({x.from_user.id})\n–ß–µ–∫: {x.text}", reply_markup=kb)
            await x.answer("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω—É!", reply_markup=main_menu())

# === –í—ã–≤–µ—Å—Ç–∏ ===
@dp.message_handler(lambda m: m.text == "üí∏ –í—ã–≤–µ—Å—Ç–∏")
async def withdraw(msg: types.Message):
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞:")

    @dp.message_handler(lambda m: m.text.isdigit())
    async def with_sum(m: types.Message):
        s = int(m.text)
        d = load_data()
        uid = str(m.from_user.id)
        if d[uid]["balance"] < s:
            return await m.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!")
        d[uid]["balance"] -= s
        save_data(d)
        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"wdok_{uid}_{s}"))
        kb.add(types.InlineKeyboardButton("‚ùå –û—Ç–∫–∞–∑–∞—Ç—å", callback_data=f"wderr_{uid}_{s}"))
        await bot.send_message(ADMIN_ID, f"üí∏ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ {s} Gram –æ—Ç {m.from_user.full_name} ({uid})", reply_markup=kb)
        await m.answer("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω—É!", reply_markup=main_menu())

# === –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å ===
@dp.message_handler(lambda m: m.text == "üí∞ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å")
async def bonus(msg: types.Message):
    d = load_data()
    uid = str(msg.from_user.id)
    now = datetime.now().strftime("%Y-%m-%d")
    if d[uid]["last_bonus"] != now:
        d[uid]["balance"] += 500
        d[uid]["last_bonus"] = now
        save_data(d)
        await msg.answer("üéÅ –í—ã –ø–æ–ª—É—á–∏–ª–∏ 500 Gram!")
    else:
        await msg.answer("‚è≥ –ë–æ–Ω—É—Å –¥–æ—Å—Ç—É–ø–µ–Ω —Ä–∞–∑ –≤ –¥–µ–Ω—å!")

# === –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ===
@dp.message_handler(lambda m: m.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def stat(msg: types.Message):
    d = load_data()
    await msg.answer(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n–î–∞—Ç–∞ —Å—Ç–∞—Ä—Ç–∞: {START_DATE}\n–í–ª–∞–¥–µ–ª–µ—Ü: {OWNER}\n–ü–æ–¥–¥–µ—Ä–∂–∫–∞: {SUPPORT}\n–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(d)}")

# === –ü–æ–¥–¥–µ—Ä–∂–∫–∞ ===
@dp.message_handler(lambda m: m.text == "üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def supp(msg: types.Message):
    await msg.answer("‚úçÔ∏è –ù–∞–ø–∏—à–∏ —Å–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É:")
    @dp.message_handler()
    async def send_support(m: types.Message):
        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton("‚úâÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{m.from_user.id}"))
        await bot.send_message(ADMIN_ID, f"üì© –û—Ç {m.from_user.full_name} ({m.from_user.id}):\n{m.text}", reply_markup=kb)
        await m.answer("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!", reply_markup=main_menu())

# === CALLBACK –∫–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω–∞ ===
@dp.callback_query_handler(lambda c: True)
async def callbacks(c: types.CallbackQuery):
    d = load_data()
    if c.data.startswith("add_"):
        uid, s = c.data.split("_")[1], int(c.data.split("_")[2])
        d[uid]["balance"] += s
        save_data(d)
        await bot.send_message(int(uid), f"‚úÖ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ +{s} Gram –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!")
        await c.message.edit_text("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ.")
    elif c.data.startswith("deny_"):
        await bot.send_message(int(c.data.split("_")[1]), "‚ùå –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.")
        await c.message.edit_text("‚ùå –û—Ç–∫–∞–∑–∞–Ω–æ.")
    elif c.data.startswith("wdok_"):
        uid, s = c.data.split("_")[1], int(c.data.split("_")[2])
        await bot.send_message(int(uid), f"‚úÖ –í—ã–≤–æ–¥ {s} Gram –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!")
        await bot.send_message(CHANNEL_FOR_LOGS, "üí∏ –ò–≥—Ä–æ–∫ —Å–¥–µ–ª–∞–ª –≤—ã–≤–æ–¥ —Å –±–æ—Ç–∞ üí∏")
        await c.message.edit_text("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ.")
    elif c.data.startswith("wderr_"):
        uid, s = c.data.split("_")[1], int(c.data.split("_")[2])
        d[uid]["balance"] += s
        save_data(d)
        await bot.send_message(int(uid), "‚ùå –í—ã–≤–æ–¥ –æ—Ç–∫–ª–æ–Ω—ë–Ω, —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã.")
        await c.message.edit_text("‚ùå –û—Ç–∫–∞–∑–∞–Ω–æ.")
    elif c.data.startswith("reply_"):
        uid = int(c.data.split("_")[1])
        await bot.send_message(ADMIN_ID, f"–û—Ç–≤–µ—Ç –¥–ª—è {uid}:")
        @dp.message_handler()
        async def send_ans(m: types.Message):
            await bot.send_message(uid, f"üí¨ –û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∞:\n{m.text}")
            await m.answer("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")

# === –ê–≤—Ç–æ–ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª –∫–∞–∂–¥—ã–µ 5-10 –º–∏–Ω ===
async def auto_post():
    while True:
        try:
            await bot.send_message(CHANNEL_FOR_LOGS, "üí∏ –ò–≥—Ä–æ–∫ —Å–¥–µ–ª–∞–ª –≤—ã–≤–æ–¥ —Å –±–æ—Ç–∞ üí∏")
        except: pass
        await asyncio.sleep(random.randint(300, 600))

# === Flask-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Koyeb ===
app = web.Application()
async def handle(request): return web.Response(text="Bot OK on Koyeb 8000")
app.add_routes([web.get("/", handle)])

async def main():
    loop = asyncio.get_event_loop()
    loop.create_task(executor.start_polling(dp, skip_updates=True))
    loop.create_task(auto_post())
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", 8000)
    await site.start()
    print("‚úÖ Bot started on port 8000")
    while True: await asyncio.sleep(3600)

if __name__ == "__main__":
    asyncio.run(main())
