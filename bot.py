import json, os, asyncio, random
from datetime import datetime
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from aiogram.filters import CommandStart
from aiohttp import web

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
TOKEN = "8499397849:AAGgiXQhk6Wq0vIYFxMKicZwoIBFoqZNWJk"
ADMIN_ID = 7816374758  # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π ID
DATA_FILE = "data.json"
CHANNELS_FILE = "channels.json"
START_DATE = "27.10.2025"
OWNER = "@winikson"
SUPPORT = "@winiksona"

bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

# === –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ===
def load_json(file, default):
    if not os.path.exists(file):
        with open(file, "w") as f:
            json.dump(default, f)
    with open(file) as f:
        return json.load(f)

def save_json(file, data):
    with open(file, "w") as f:
        json.dump(data, f, indent=2)

def load_data(): return load_json(DATA_FILE, {})
def save_data(d): save_json(DATA_FILE, d)
def load_channels(): return load_json(CHANNELS_FILE, ["@example_channel"])
def save_channels(c): save_json(CHANNELS_FILE, c)

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ ===
async def check_subscription(user_id):
    for ch in load_channels():
        try:
            member = await bot.get_chat_member(ch, user_id)
            if member.status not in ("member","administrator","creator"):
                return False
        except: return False
    return True

# === –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ===
def main_menu():
    kb = ReplyKeyboardBuilder()
    kb.button(text="üé≤ –ò–≥—Ä–∞—Ç—å")
    kb.button(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å")
    kb.button(text="üí∞ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å")
    kb.button(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    kb.button(text="üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
    return kb.as_markup(resize_keyboard=True)

# === /start ===
@dp.message(CommandStart())
async def start(msg: types.Message):
    data = load_data()
    uid = str(msg.from_user.id)
    ref = msg.text.split(" ")[1] if len(msg.text.split())>1 else None
    if uid not in data:
        data[uid] = {"name": msg.from_user.full_name,"balance":0,"ref":ref,"last_bonus":"0"}
        save_data(data)
    if not await check_subscription(msg.from_user.id):
        chs = "\n".join(load_channels())
        return await msg.answer(f"‚ö†Ô∏è –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª(—ã):\n{chs}")
    await msg.answer("üé∞ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",reply_markup=main_menu())

# === –ò–≥—Ä–∞ ===
@dp.message(F.text=="üé≤ –ò–≥—Ä–∞—Ç—å")
async def play(msg: types.Message):
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–≤–∫—É:")
    await dp.current_state(chat=msg.chat.id,user=msg.from_user.id).set_state("await_bet")

@dp.message(state="await_bet")
async def bet(msg: types.Message, state):
    data = load_data()
    uid = str(msg.from_user.id)
    try: bet = int(msg.text)
    except: return await msg.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
    if data[uid]["balance"]<bet:
        await msg.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!");return await state.clear()
    await msg.answer("üé≤ –ë—Ä–æ—Å–∞–µ–º –∫—É–±–∏–∫–∏...")
    user_dice = await msg.answer_dice("üé≤")
    await asyncio.sleep(4)
    bot_dice = await msg.answer_dice("üé≤")
    await asyncio.sleep(4)
    u,b = user_dice.dice.value, bot_dice.dice.value
    if u>b:
        data[uid]["balance"]+=bet; res=f"–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏! +{bet}üí∞"
    elif u<b:
        data[uid]["balance"]-=bet; res=f"–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏! -{bet}üí∞"
    else: res="–ù–∏—á—å—è!"
    save_data(data)
    await msg.answer(res,reply_markup=main_menu())
    await state.clear()

# === –ü—Ä–æ—Ñ–∏–ª—å ===
@dp.message(F.text=="üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def prof(msg: types.Message):
    d=load_data();u=d[str(msg.from_user.id)]
    kb=ReplyKeyboardBuilder()
    for b in ["üíµ –ü–æ–ø–æ–ª–Ω–∏—Ç—å","üí∏ –í—ã–≤–µ—Å—Ç–∏","üéÅ –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å","üîô –ù–∞–∑–∞–¥"]: kb.button(text=b)
    await msg.answer(f"<b>üë§ –ü—Ä–æ—Ñ–∏–ª—å</b>\n–ù–∏–∫: {u['name']}\nID: {msg.from_user.id}\n–ë–∞–ª–∞–Ω—Å: {u['balance']} Gram",
                     reply_markup=kb.as_markup(resize_keyboard=True))

# === –ù–∞–∑–∞–¥ ===
@dp.message(F.text=="üîô –ù–∞–∑–∞–¥")
async def back(msg: types.Message): await msg.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",reply_markup=main_menu())

# === –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å ===
@dp.message(F.text=="üéÅ –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å")
async def earn(msg: types.Message):
    link=f"https://t.me/{(await bot.get_me()).username}?start={msg.from_user.id}"
    await msg.answer(f"üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{link}\n\nüíé –ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø–æ–¥–ø–∏—Å–∞–≤—à–µ–≥–æ—Å—è —Ä–µ—Ñ–µ—Ä–∞–ª–∞: +1000 Gram")

# === –ü–æ–ø–æ–ª–Ω–∏—Ç—å ===
@dp.message(F.text=="üíµ –ü–æ–ø–æ–ª–Ω–∏—Ç—å")
async def depo(msg: types.Message):
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:")
    await dp.current_state(chat=msg.chat.id,user=msg.from_user.id).set_state("await_depo_sum")

@dp.message(state="await_depo_sum")
async def depo_sum(msg: types.Message, state):
    try: s=int(msg.text)
    except: return await msg.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
    await msg.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —á–µ–∫:")
    await state.update_data(sum=s)
    await state.set_state("await_depo_check")

@dp.message(state="await_depo_check")
async def depo_check(msg: types.Message, state):
    d=await state.get_data(); s=d["sum"]
    kb=InlineKeyboardBuilder()
    kb.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",callback_data=f"add_{msg.from_user.id}_{s}")
    kb.button(text="‚ùå –û—Ç–∫–∞–∑–∞—Ç—å",callback_data=f"deny_{msg.from_user.id}_{s}")
    await bot.send_message(ADMIN_ID,f"üí∞ –ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ {s} Gram\n–û—Ç: {msg.from_user.full_name} ({msg.from_user.id})\n–ß–µ–∫: {msg.text}",
                           reply_markup=kb.as_markup())
    await msg.answer("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω—É!");await state.clear()

# === –í—ã–≤–µ—Å—Ç–∏ ===
@dp.message(F.text=="üí∏ –í—ã–≤–µ—Å—Ç–∏")
async def withdraw(msg: types.Message):
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—ã–≤–æ–¥–∞:")
    await dp.current_state(chat=msg.chat.id,user=msg.from_user.id).set_state("await_with_sum")

@dp.message(state="await_with_sum")
async def with_sum(msg: types.Message, state):
    try: s=int(msg.text)
    except: return await msg.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
    d=load_data();u=d[str(msg.from_user.id)]
    if u["balance"]<s: return await msg.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!")
    u["balance"]-=s;save_data(d)
    kb=InlineKeyboardBuilder()
    kb.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",callback_data=f"wdok_{msg.from_user.id}_{s}")
    kb.button(text="‚ùå –û—Ç–∫–∞–∑–∞—Ç—å",callback_data=f"wderr_{msg.from_user.id}_{s}")
    await bot.send_message(ADMIN_ID,f"üí∏ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ {s} Gram\n–û—Ç: {msg.from_user.full_name} ({msg.from_user.id})",
                           reply_markup=kb.as_markup())
    await msg.answer("‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω—É!");await state.clear()

# === –ë–æ–Ω—É—Å ===
@dp.message(F.text=="üí∞ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å")
async def bonus(msg: types.Message):
    d=load_data();u=d[str(msg.from_user.id)]
    now=datetime.now().strftime("%Y-%m-%d")
    if u["last_bonus"]!=now:
        u["last_bonus"]=now;u["balance"]+=500;save_data(d)
        await msg.answer("üéÅ –í—ã –ø–æ–ª—É—á–∏–ª–∏ 500 Gram!")
    else: await msg.answer("‚è≥ –ë–æ–Ω—É—Å –º–æ–∂–Ω–æ —Ä–∞–∑ –≤ –¥–µ–Ω—å!")

# === –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ===
@dp.message(F.text=="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def stat(msg: types.Message):
    d=load_data()
    await msg.answer(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n–î–∞—Ç–∞ —Å—Ç–∞—Ä—Ç–∞: {START_DATE}\n–í–ª–∞–¥–µ–ª–µ—Ü: {OWNER}\n–ü–æ–¥–¥–µ—Ä–∂–∫–∞: {SUPPORT}\n–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(d)}")

# === –ü–æ–¥–¥–µ—Ä–∂–∫–∞ ===
@dp.message(F.text=="üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def supp(msg: types.Message):
    await msg.answer("‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:")
    await dp.current_state(chat=msg.chat.id,user=msg.from_user.id).set_state("await_sup")

@dp.message(state="await_sup")
async def sup_send(msg: types.Message, state):
    kb=InlineKeyboardBuilder();kb.button(text="‚úâÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å",callback_data=f"reply_{msg.from_user.id}")
    await bot.send_message(ADMIN_ID,f"üì® –û—Ç {msg.from_user.full_name} ({msg.from_user.id}):\n{msg.text}",reply_markup=kb.as_markup())
    await msg.answer("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!");await state.clear()

# === –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ===
@dp.message(F.text=="/admin")
async def admin(msg: types.Message):
    if msg.from_user.id!=ADMIN_ID:return
    kb=ReplyKeyboardBuilder()
    for b in ["üíé –í—ã–¥–∞—Ç—å –¥–µ–Ω—å–≥–∏","üì¢ –†–∞—Å—Å—ã–ª–∫–∞","üìã –ö–∞–Ω–∞–ª—ã","üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –∏–≥—Ä–æ–∫—É","üîô –ù–∞–∑–∞–¥"]: kb.button(text=b)
    await msg.answer("üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å",reply_markup=kb.as_markup(resize_keyboard=True))

# --- –í—ã–¥–∞—Ç—å –¥–µ–Ω—å–≥–∏
@dp.message(F.text=="üíé –í—ã–¥–∞—Ç—å –¥–µ–Ω—å–≥–∏")
async def give_start(msg: types.Message):
    if msg.from_user.id!=ADMIN_ID:return
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ: ID —Å—É–º–º–∞");await dp.current_state(chat=msg.chat.id,user=msg.from_user.id).set_state("await_give")

@dp.message(state="await_give")
async def give_done(msg: types.Message,state):
    try:id_,s=msg.text.split();s=int(s)
    except:return await msg.answer("–§–æ—Ä–º–∞—Ç: ID —Å—É–º–º–∞")
    d=load_data()
    if id_ not in d:return await msg.answer("–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    d[id_]["balance"]+=s;save_data(d)
    await msg.answer("‚úÖ –í—ã–¥–∞–Ω–æ!");await bot.send_message(int(id_),f"üíé –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {s} Gram –æ—Ç –∞–¥–º–∏–Ω–∞!")
    await state.clear()

# --- –ö–∞–Ω–∞–ª—ã
@dp.message(F.text=="üìã –ö–∞–Ω–∞–ª—ã")
async def chans(msg: types.Message):
    if msg.from_user.id!=ADMIN_ID:return
    ch=load_channels()
    await msg.answer(f"üìã –ö–∞–Ω–∞–ª—ã: {', '.join(ch)}\n/add @channel ‚Äî –¥–æ–±–∞–≤–∏—Ç—å\n/rem @channel ‚Äî —É–¥–∞–ª–∏—Ç—å")

@dp.message(F.text.startswith("/add"))
async def addch(msg: types.Message):
    if msg.from_user.id!=ADMIN_ID:return
    ch=load_channels();c=msg.text.split()[1];ch.append(c);save_channels(ch)
    await msg.answer("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∫–∞–Ω–∞–ª")

@dp.message(F.text.startswith("/rem"))
async def remch(msg: types.Message):
    if msg.from_user.id!=ADMIN_ID:return
    ch=load_channels();c=msg.text.split()[1]
    if c in ch:ch.remove(c);save_channels(ch)
    await msg.answer("üóëÔ∏è –£–¥–∞–ª–µ–Ω –∫–∞–Ω–∞–ª")

# --- –†–∞—Å—Å—ã–ª–∫–∞
@dp.message(F.text=="üì¢ –†–∞—Å—Å—ã–ª–∫–∞")
async def broad(msg: types.Message):
    if msg.from_user.id!=ADMIN_ID:return
    await msg.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ (—Å –ø–æ–¥–ø–∏—Å—å—é):")
    await dp.current_state(chat=msg.chat.id,user=msg.from_user.id).set_state("await_broad")

@dp.message(state="await_broad",content_types=["text","photo"])
async def do_broad(msg: types.Message,state):
    d=load_data();sent=0
    for u in d:
        try:
            if msg.photo:
                await bot.send_photo(int(u),msg.photo[-1].file_id,caption=msg.caption or "")
            else: await bot.send_message(int(u),msg.text)
            sent+=1
        except: pass
    await msg.answer(f"‚úÖ –†–∞–∑–æ—Å–ª–∞–Ω–æ {sent} —Å–æ–æ–±—â–µ–Ω–∏–π")
    await state.clear()

# --- –ù–∞–ø–∏—Å–∞—Ç—å –∏–≥—Ä–æ–∫—É
@dp.message(F.text=="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –∏–≥—Ä–æ–∫—É")
async def to_user(msg: types.Message):
    if msg.from_user.id!=ADMIN_ID:return
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ: ID —Å–æ–æ–±—â–µ–Ω–∏–µ")
    await dp.current_state(chat=msg.chat.id,user=msg.from_user.id).set_state("await_msg")

@dp.message(state="await_msg")
async def send_user(msg: types.Message,state):
    try:id_,text=msg.text.split(" ",1)
    except:return await msg.answer("–§–æ—Ä–º–∞—Ç: ID —Ç–µ–∫—Å—Ç")
    await bot.send_message(int(id_),f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∞:\n{text}")
    await msg.answer("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!");await state.clear()

# === Callback –¥–ª—è –∑–∞—è–≤–æ–∫ ===
@dp.callback_query()
async def callbacks(c: types.CallbackQuery):
    d=load_data()
    parts=c.data.split("_")
    act=parts[0]
    if act=="add":
        uid, s = parts[1], int(parts[2])
        d[uid]["balance"]+=s;save_data(d)
        await bot.send_message(int(uid),f"‚úÖ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ +{s} Gram –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!")
        await c.message.edit_text("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!")
    elif act=="deny":
        await bot.send_message(int(parts[1]),"‚ùå –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.")
        await c.message.edit_text("‚ùå –û—Ç–∫–∞–∑–∞–Ω–æ.")
    elif act=="wdok":
        uid,s=parts[1],int(parts[2])
        await bot.send_message(ADMIN_ID,"–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —á–µ–∫ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
        await bot.send_message(int(uid),f"‚úÖ –í—ã–≤–æ–¥ {s} Gram –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, –æ–∂–∏–¥–∞–π—Ç–µ —á–µ–∫ –≤ –ª–∏—á–Ω—ã—Ö.")
    elif act=="wderr":
        uid,s=parts[1],int(parts[2])
        d[uid]["balance"]+=s;save_data(d)
        await bot.send_message(int(uid),"‚ùå –í—ã–≤–æ–¥ –æ—Ç–∫–ª–æ–Ω–µ–Ω, —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã.")
        await c.message.edit_text("‚ùå –û—Ç–∫–∞–∑–∞–Ω–æ –∏ –≤–æ–∑–≤—Ä–∞—Ç.")
    elif act=="reply":
        uid=int(parts[1])
        await bot.send_message(ADMIN_ID,f"–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è {uid}:")
        await dp.current_state(chat=c.message.chat.id,user=c.from_user.id).set_state("await_reply")
        await dp.current_state(chat=c.message.chat.id,user=c.from_user.id).update_data(uid=uid)

@dp.message(state="await_reply")
async def reply_to_user(msg: types.Message,state):
    d=await state.get_data()
    await bot.send_message(d["uid"],f"üí¨ –û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∞:\n{msg.text}")
    await msg.answer("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω");await state.clear()

# === Flask –¥–ª—è Koyeb (–ø–æ—Ä—Ç 8000) ===
app=web.Application()
async def handle(req): return web.Response(text="Bot OK on Koyeb :8000")
app.add_routes([web.get("/",handle)])

async def main():
    asyncio.create_task(dp.start_polling(bot))
    runner=web.AppRunner(app);await runner.setup()
    site=web.TCPSite(runner,"0.0.0.0",8000);await site.start()
    print("‚úÖ Bot started on port 8000")
    while True: await asyncio.sleep(3600)

if __name__=="__main__":
    asyncio.run(main())
